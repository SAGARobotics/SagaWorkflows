on:
  workflow_call:

    inputs:
      runs-on:
        type: string
        description: |
          Stringified list for choosing GitHub runners. The default is using the self-hosted 
          buildfarm. For public repositories, the public hosted runners (for example ubuntu-latest)
          must be used.
          Example value: '["ubuntu-latest"]'
        default: '["self-hosted", "buildfarm"]'
        required: false

      release-type:
        type: string
        description: |
          The type of release we want the workflow to produce. Valid options are 'internal',
          'external' or 'public'. Beware that using the 'external' or 'public' releases will
          make your package available outside the organization, but it will **not release its
          dependencies**. So, make sure the dependencies are available in the same release.
        default: internal
        required: false

      packages:
        type: string
        description: |
          Stringified list of the pacakges you want to release with this workflow. If this 
          parameter isn't provided, the default behaviour will be to run the workflow for
          all the packages in the repository.
          Example value: '["my_ros_package", "another_ros_package"]'
        default: '[]'
        required: false
  
      distribution:
        type: string
        description: |
          The ROS distribution which the workflow will use for building/testing
          the package(s).
        default: 'noetic'
        required: false

      build-with-autonomy:
        type: boolean
        description: |
          Control whether or not to build the pacakge with the ThorvaldAutonomy repository.
          Building with the ThorvaldAutonomy repo will place any declared dependencies that
          can be found in it, into the buildspace with your package/packages.
        default: false
        required: false

      saga-action-ref:
        type: string
        description: |
          The reference to which version of SagaActions you want to run.
        default: 'main'
        required: false

      release:
        type: boolean
        description: |
          Control input for releasing the repo.
        default: false
        required: false

    secrets:
      pat-token:
        description: |
          Personal access token with at least read privileges for all
          repositories in the organization.
        required: true
      repo-user:
        description: Username with read/write privileges to Saga's repository.
        required: true
      repo-pass:
        description: Password for the provided user.
        required: true

env:
  CATKIN_WS_SRC: catkin_ws/src
  BASE_WORKSPACE: ${{ github.workspace }}/base_ws

jobs:
  prepare-jobs:
    runs-on: ${{ fromJson(inputs.runs-on) }}
    name: Create job parameters and prepare common workspace

    outputs:
      matrix: ${{ steps.set-package-list.outputs.prepared-jobs }}
      artifact: ${{ steps.base.outputs.artifact-tag }}

    steps:
      - name: Checkout SagaActions (${{ inputs.saga-action-ref }})
        uses: actions/checkout@v3
        with:
          repository: SAGARobotics/SagaActions
          token: ${{ secrets.pat-token }}
          path: .github/SagaActions
          ref: ${{ inputs.saga-action-ref }}

      - name: Temporary checkout ${{ github.event.repository.name }}
        if: ${{ inputs.packages == '[]' }}
        uses: actions/checkout@v3
        with:
          repository: SAGARobotics/${{ github.event.repository.name }}
          token: ${{ secrets.pat-token }}
          submodules: recursive
          path: tmp_repository

      - name: List packages in the repository
        if: ${{ inputs.packages == '[]' }}
        id: list-packages
        uses: ./.github/SagaActions/ros/list_packages
        with:
          workspace: ${{ github.workspace }}/tmp_repository
      
      - name: '[DEBUG] show the output of the list-packages action'
        if: ${{ inputs.packages == '[]' }}
        run: |
          echo "package-list=${{ steps.list-packages.outputs.package-list }}"
        shell: bash

      - name: Create base workspace
        id: base
        uses: ./.github/SagaActions/ros/create_workspace_artifact
        with:
          repository: ${{ github.event.repository.name }}
          pat-token: ${{ secrets.pat-token }}
          use-autonomy: ${{ inputs.build-with-autonomy }}
          workspace-path: base_ws

      - name: Set output packages
        id: set-package-list
        run: |
          TEST='["hello", "world", "!"]'
          echo "test=$TEST" >> $GITHUB_OUTPUT
          if [ "${{ inputs.packages }}" == "[]" ]; then
            PACKAGES='${{ steps.list-packages.outputs.package-list }}'
            echo "Using generated package list from workspace"
          else
            PACKAGES=${{ inputs.packages }}
            echo "Using package list from input"
          fi
          echo "prepared-jobs=$PACKAGES" >> GITHUB_OUTPUT
          echo "Resulting package list: $PACKAGES"
        shell: bash

      - name: '[DEBUG] show the output of the set-package-list action'
        run: |
          echo "prepared-jobs=${{ steps.set-package-list.outputs.prepared-jobs }}"
          echo "test=${{ steps.set-package-list.outputs.test }}"
          echo "artifact-tag=${{ steps.base.outputs.artifact-tag }}"
        shell: bash

  test:
    runs-on: ${{ fromJson(inputs.runs-on) }}
    name: Test packages
    needs: prepare-jobs

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-jobs.outputs.matrix) }}

    steps:
      - name: Checkout SagaActions (${{ inputs.saga-action-ref }})
        uses: actions/checkout@v3
        with:
          repository: SAGARobotics/SagaActions
          token: ${{ secrets.pat-token }}
          path: .github/SagaActions
          ref: ${{ inputs.saga-action-ref }}

      - name: Create isolated workspace
        id: create-isolated-workspace
        uses: ./.github/SagaActions/ros/create_isolated_workspace
        with:
          package-name: ${{ matrix.package }}
          workspace-path: isolated_ws
          artifact-tag: ${{ needs.prepare-jobs.outputs.artifact }}
