on:
  workflow_call:
    
    inputs:

      runs-on:      
        type: string
        description: |
          Stringified list for choosing GitHub runners. The default is using the self-hosted 
          buildfarm. For public repositories, the public hosted runners (for example ubuntu-latest)
          must be used.
          Example value: '["ubuntu-latest"]'
        default: '["self-hosted", "buildfarm"]'
        required: false

      release:
        type: boolean
        description: |
          Control whether or not to run the release jobs.
        default: false
        required: false

      release-type:
        type: string
        description: |
          The type of release we want the workflow to produce. Valid options are 'internal',
          'external' or 'public'. Beware that using the 'external' or 'public' releases will
          make your package available outside the organization, but it will **not release its
          dependencies**. So, make sure the dependencies are available in the same release.
        default: internal
        required: false
      
      packages:
        type: string
        description: |
          Stringified list of the pacakges you want to release with this workflow. If this 
          parameter isn't provided, the default behaviour will be to run the workflow for
          all the packages in the repository.
          Example value: '["my_ros_package", "another_ros_package"]'
        default: '[]'
        required: false

      build-with-autonomy:
        type: boolean
        default: true
        required: false
        description: |
          Control whether or not to build the pacakge with the ThorvaldAutonomy repository.
          Building with the ThorvaldAutonomy repo will place any declared dependencies that
          can be found in it, into the buildspace with your package/packages.
      
      distribution:
        type: string
        description: |
          The ROS distribution the workflow will run for. 
          Supported distributions: 'melodic', 'noetic'
        default: 'noetic'
        required: false

      run-pre-release-checks:
        type: boolean
        description: |
          Control variable for preforming red tape checks. These checks should be kept to a 
          minimum. The checks here should catch easy-to-do mistakes that have to be in place
          before a release, so the build doesn't run, and then we catch the mistake. 
          Checks: 'git-tag-ros-version'
        default: false
        required: false
      
      saga-action-ref:
        type: string
        description: |
          The reference to which version of SagaActions you want to run.
        default: 'main'
        required: false

      
    secrets:

      pat-token:
        description: |
          Personal access token with read privileges for all repositories in the organization.
        required: true
      
      repo-user:
        description: Username with read/write privileges to SagaRobotics' APT repository.
        required: true

      repo-pass:
        description: Password for the provided user to Saga Robotics' APT repository.
        required: true


env:
  CATKIN_WS: catkin_ws
  BASE_WORKSPACE: ${{ github.workspace }}/base_ws


jobs:

  prepare-jobs:
    name: Create job parameters and prepare common workspace
    runs-on: ${{ fromJson(inputs.runs-on) }}

    outputs:
      matrix: ${{ steps.set-package-list.outputs.pacakge-list }}
      artifact: ${{ steps.base.outputs.artifact-tag }}
      
    steps:
      # Check package list was set in input
      - name: Check package list
        id: check-package-list
        run: |
          if [ -z "${{ inputs.packages }}" ]; then
            echo "No package list provided. Running workflow for all packages in repository."
            echo "package-list=''" >> $GITHUB_OUTPUT
          else
            echo "Package list provided. Running workflow for the following packages:"
            echo ${{ inputs.packages }}
            echo "package-list=${{ inputs.packages }}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      # Checking out necessary repositories
      - name: Checkout SagaActions (${{ inputs.saga-action-ref }})
        uses: actions/checkout@v3
        with:
          repository: SAGARobotics/SagaActions
          token: ${{ secrets.pat-token }}
          path: .github/SagaActions
          ref: ${{ inputs.saga-action-ref }}

      - name: Temporary checkout ${{ github.event.repository.name }}
        if: ${{ steps.check-package-list.outputs.package-list != '' }}
        uses: actions/checkout@v3
        with:
          repository: SAGARobotics/${{ github.event.repository.name }}
          token: ${{ secrets.pat-token }}
          submodules: recursive
          path: tmp_repository

      - name: List packages in the repository
        if: ${{ steps.check-package-list.outputs.package-list != '' }}
        id: list-packages
        uses: .github/SagaActions/list_packages
        with:
          workspace: ${{ github.workspace }}/tmp_repository

      - name: Create base workspace
        id: base
        uses: .github/SagaActions/create_workspace_artifact
        with:
          repository: ${{ github.event.repository.name }}
          pat-token: ${{ secrets.pat-token }}
          use-autonomy: ${{ inputs.build-with-autonomy }}
          workspace-path: $BASE_WORKSPACE

      - name: Set output list
        id: set-package-list
        run: |
          if [ ${{ steps.check-package-list.outputs.package-list }} != '' ]; then
            echo "Using generated package list from workspace"
            echo "package-list=${{ steps.list-packages.outputs.package-list }}" >> GITHUB_OUTPUT
          else
            echo "Using package list from input"
            echo "package-list=${{ inputs.packages }}" >> GITHUB_OUTPUT
          fi
        shell: bash

  # test:
  #   name: Run tests
  #   runs-on: ${{ fromJson(inputs.runs-on) }}
  #   needs: prepare-jobs
  #   strategy:
  #     fail-fast: false
  #     matrix: ${{ fromJson(needs.prepare-jobs.outputs.matrix) }}
  #   steps:
  #     - name: Download workspace artifact
  #     - name: Create isolated workspace
  #     - name: Run tests
