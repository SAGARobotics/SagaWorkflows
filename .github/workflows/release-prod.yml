on:
  workflow_call:
    inputs:
      ros-distributions:
        description: |
          Stringified list of ROS distributions the package(s) will be built for
        required: true
        default: melodic
        type: string
      package:
        description: The ROS package this workflow will run for
        required: true
        type: string

      catch-dir:
        description: |
          Path to catch test files from the package's directory
        default: disabled
        required: false
        type: string
      gtest-dir:
        description: |
          Path to directory where google test files exist, from the 
          package's directory
        default: disabled
        required: false
        type: string
      no-rostests:
        description: | 
          Control parameter for running rostests. 
        default: false
        required: false
        type: boolean

    secrets:
      pat-token:
        required: true
      dev-apt-read-user:
        required: true
      dev-apt-read-write-user:
        required: true

jobs:
  unit-tests:
    runs-on: [self-hosted, buildfarm]
    name: Unit tests

    steps:
      - name: Checkout ${{ github.event.repository.name }}
        uses: actions/checkout@v2
        with:
          repository: SAGARobotics/${{ github.event.repository.name }}
          token: ${{ secrets.pat-token }}

      - name: Catch
        if: ${{ inputs.catch-dir != 'disabled' }}
        run: |
          cd ${{ github.workspace }}/${{ inputs.package }}/${{ inputs.catch-dir }}
          g++ -std=c++11 -Wall -o catchtests *.cpp
          ./catchtests
        shell: bash

      - name: GTest
        if: ${{ inputs.gtest-dir != 'disabled' }}
        run: |
          echo "::warning::Support for Google's test suite is not yet implemented"
        shell: bash

  rostests:
    if: $${{ !inputs.no-rostests }}
    runs-on: [self-hosted, buildfarm]
    name: Integration tests
    
    strategy:
      matrix:
        ros-distro: ${{ fromJson(inputs.ros-distributions) }}

    steps:
      - name: Checkout ${{ github.event.repository.name }}
        uses: actions/checkout@v2
        with:
          repository: SAGARobotics/${{ github.event.repository.name }}
          token: ${{ secrets.pat-token }}
      - name: Checkout SagaActions
        uses: actions/checkout@v2
        with:
          repository: SAGARobotics/SagaActions
          token: ${{ secrets.pat-token }}
          path: .github/SagaActions

      - name: Rostests
        uses: ./.github/SagaActions/testing/rostests
        with:
          ros-distribution: ${{ matrix.ros-distro }}
          package-to-test: ${{ inputs.package }}
          saga-deb-read-user: ${{ secrets.dev-apt-read-user }}

  build:
    needs: [unit-tests, rostests]
    runs-on: [self-hosted, buildfarm]
    name: Build Debian package

    strategy:
      matrix:
        ros-distro: ${{ fromJson(inputs.ros-distributions) }}

    steps:
      - name: Checkout ${{ github.event.repository.name }}
        uses: actions/checkout@v2
        with:
          repository: SAGARobotics/${{ github.event.repository.name }}
          token: ${{ secrets.pat-token }}
      - name: Checkout SagaActions
        uses: actions/checkout@v2
        with:
          repository: SAGARobotics/SagaActions
          token: ${{ secrets.pat-token }}
          path: .github/SagaActions

      # - name: Prerelease-checks
      #   uses: ./.github/SagaActions/prerelease-check
      #   with:
      #     ros-package-name: ${{ inputs.package }}
      #     repo-user: ${{ secrets.dev-apt-read-user }}
      - name: Build .deb package
        id: build
        uses: ./.github/SagaActions/build-debian
        with:
          ros-distribution: ${{ matrix.ros-distro }}
          package-to-build: ${{ inputs.package }}
          saga-deb-read-user: ${{ secrets.dev-apt-read-user }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ inputs.package }}-${{ matrix.ros-distro }}-artifact
          path: ${{ github.workspace }}/${{ inputs.package }}/bin/${{ steps.build.outputs.deb_package_name }}
          if-no-files-found: error
          retention-days: 1

  release:
    needs: build
    runs-on: [self-hosted, buildfarm]
    name: Upload

    strategy:
      matrix:
        ros-distro: ${{ fromJson(inputs.ros-distributions) }}

    steps:
      - name: Checkout ${{ github.event.repository.name }}
        uses: actions/checkout@v2
        with:
          repository: SAGARobotics/${{ github.event.repository.name }}
          token: ${{ secrets.pat-token }}
      - name: Checkout SagaActions
        uses: actions/checkout@v2
        with:
          repository: SAGARobotics/SagaActions
          token: ${{ secrets.pat-token }}
          path: .github/SagaActions

      - name: Download artifact
        id: download
        uses: actions/download-artifact@v2
        with:
          name: ${{ inputs.package }}-${{ matrix.ros-distro }}-artifact
          path: ${{ github.workspace }}/artifacts/${{ matrix.ros-distro }}

      - name: Find debian filename
        id: name
        run: |
          echo "Artifacts:"
          DEBFILE=$(ls ${{ steps.download.outputs.download-path }} | grep -e "\.deb$")
          echo "::set-output name=debfile::$DEBFILE"
        shell: bash

      - name: Release package to repository
        id: apt-release
        uses: ./.github/SagaActions/push-package
        with:
          debian-package-name: ${{ steps.name.outputs.debfile }}
          package-location: ${{ steps.download.outputs.download-path }}
          ros-package-name: ${{ inputs.package }}
          repo-user: ${{ secrets.dev-apt-read-write-user }}

      - name: Update saga-rosdep
        uses: ./.github/SagaActions/update-saga-rosdep
        with:
          debian-package-name: ${{ steps.name.outputs.debfile }}
          ros-package-name: ${{ inputs.package }}
          repo-token: ${{ secrets.pat-token }}
